trigger:
  branches:
    include:
    - '*'
  tags:
    include:
    - '*'
pr:
  - '*'


variables:
  isGitTag: $[startsWith(variables['Build.SourceBranch'], 'refs/tags/')]
  gitTag: $[replace(variables['Build.SourceBranch'], 'refs/tags/', '')]

stages:
  - stage: Build
    jobs:
      - job: Unity3DLinux
        displayName: Unity3D (Linux)
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: true
          fetchDepth: 1

        - bash: |
            sudo apt update -qq
            sudo apt install -qq -y build-essential g++ ninja-build libavahi-client-dev
          displayName: Dependencies

        - bash: |
            echo $(variables.gitTag)
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-linux

      - job: Unity3DMac
        displayName: Unity3D (macOS)
        pool:
          vmImage: 'macos-10.15'

        steps:
        - checkout: self
          submodules: true
          fetchDepth: 1

        - bash: |
            brew install ninja
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_OSX_DEPLOYMENT_TARGET=10.9 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install

            # Setup codesigning
            # Thanks https://www.update.rocks/blog/osx-signing-with-travis/
            (
              set +x
              KEY_CHAIN=build.keychain
              echo "$MAC_CERT_B64" | base64 --decode > ossia-cert.p12

              security create-keychain -p azure $KEY_CHAIN
              security default-keychain -s $KEY_CHAIN
              security unlock-keychain -p azure $KEY_CHAIN
              security import ossia-cert.p12 -k $KEY_CHAIN -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign;
              security set-key-partition-list -S apple-tool:,apple: -s -k azure $KEY_CHAIN

              rm -rf *.p12
            )

            security unlock-keychain -p azure build.keychain

            (
              cd install
              codesign --force --timestamp --sign "ossia.io" ossia/Plugins/macos/ossia.dylib

              zip ossia-unity.zip ossia/Plugins/macos/ossia.dylib
              xcrun altool \
                   --notarize-app \
                   -t osx \
                   -f "ossia-unity.zip" \
                   --primary-bundle-id "io.ossia.ossia-unity" \
                   -u jeanmichael.celerier@gmail.com -p "@env:MAC_ALTOOL_PASSWORD"
              rm ossia-unity.zip
            )

          displayName: Build
          env:
            MAC_CERT_B64: $(MAC_CERT_B64)
            MAC_CERT_PASSWORD: $(MAC_CERT_PASSWORD)
            MAC_ALTOOL_PASSWORD: $(MAC_ALTOOL_PASSWORD)

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-macos

      - job: Unity3DIOs
        displayName: Unity3D (iOS)
        pool:
          vmImage: 'macos-10.15'

        steps:
        - checkout: self
          submodules: true

        - bash: |
            brew install ninja
          displayName: Dependencies

        - bash: |
            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=$(Build.SourcesDirectory)/3rdparty/ios-cmake/ios.toolchain.cmake -DPLATFORM=OS64 -DENABLE_BITCODE=1 
            cmake --build .
            cmake --build . --target install

            # Setup codesigning
            # Thanks https://www.update.rocks/blog/osx-signing-with-travis/
            (
              set +x
              KEY_CHAIN=build.keychain
              echo "$MAC_CERT_B64" | base64 --decode > ossia-cert.p12

              security create-keychain -p azure $KEY_CHAIN
              security default-keychain -s $KEY_CHAIN
              security unlock-keychain -p azure $KEY_CHAIN
              security import ossia-cert.p12 -k $KEY_CHAIN -P "$MAC_CERT_PASSWORD" -T /usr/bin/codesign;
              security set-key-partition-list -S apple-tool:,apple: -s -k azure $KEY_CHAIN

              rm -rf *.p12
            )

            security unlock-keychain -p azure build.keychain

            (
              cd install
              codesign --force --timestamp --sign "ossia.io" ossia/Plugins/ios/ossia.a

              zip ossia-unity.zip ossia/Plugins/ios/ossia.a
              xcrun altool \
                    --notarize-app \
                    -t ios \
                    -f "ossia-unity.zip" \
                    --primary-bundle-id "io.ossia.ossia-unity" \
                    -u jeanmichael.celerier@gmail.com -p "@env:MAC_ALTOOL_PASSWORD"
              rm ossia-unity.zip
            )

          displayName: Build
          env:
            MAC_CERT_B64: $(MAC_CERT_B64)
            MAC_CERT_PASSWORD: $(MAC_CERT_PASSWORD)
            MAC_ALTOOL_PASSWORD: $(MAC_ALTOOL_PASSWORD)

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-ios

      - job: Unity3DWin32
        displayName: Unity3D (Win32)
        pool:
          vmImage: 'windows-2019'

        steps:
        - checkout: self
          submodules: true
          fetchDepth: 1

        - script: |
            cinst -y ninja

        - script: |
            pushd "C:\Program Files (x86)\Microsoft Visual Studio\Installer\"
            for /f "delims=" %%x in ('.\vswhere.exe -latest -property InstallationPath') do set VSPATH=%%x
            popd
            call "%VSPATH%\VC\Auxiliary\Build\vcvarsall.bat" x64

            cd $(System.DefaultWorkingDirectory)
            mkdir build
            cd build
            cmake -GNinja $(Build.SourcesDirectory) -DCMAKE_CXX_COMPILER="cl.exe" -DCMAKE_C_COMPILER="cl.exe" -DOSSIA_UNITY3D_ONLY=1 -DCMAKE_SYSTEM_VERSION=7 -DCMAKE_INSTALL_PREFIX=install -DCMAKE_BUILD_TYPE=Release
            cmake --build .
            cmake --build . --target install
          displayName: Build

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/build/install
            artifactName: libossia-unity3d-win32

  - stage: Package
    condition: succeeded()
    # see https://github.com/microsoft/azure-pipelines-tasks/tree/master/Tasks/GitHubReleaseV1

    jobs:
      - job: Unity3D
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: none
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-win32
            path: $(System.DefaultWorkingDirectory)/package
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-macos
            path: $(System.DefaultWorkingDirectory)/package
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-linux
            path: $(System.DefaultWorkingDirectory)/package
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: libossia-unity3d-ios
            path: $(System.DefaultWorkingDirectory)/package

        - bash: |
            cd $(System.DefaultWorkingDirectory)

            pushd $(System.DefaultWorkingDirectory)/package
            zip -r ossia-unity3d.zip *

            mv ossia-unity3d.zip $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            popd
          displayName: Package

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: $(System.DefaultWorkingDirectory)/ossia-unity3d.zip
            artifactName: ossia-unity3d

  - stage: Deploy
    # TODO check if it runs on tag and pull request automatically
    condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))

    jobs:
      - job: GithubRelease
        pool:
          vmImage: 'ubuntu-20.04'

        steps:
        - checkout: self
          submodules: false
          fetchDepth: 1
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: ossia-max
            path: Assets
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: ossia-java
            path: Assets
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: ossia-unity3d
            path: Assets

        - bash: |
            if [ "$isGitTag" = "True" ]
            then
              RELEASE_NAME="$(gitTag)"
            else
              RELEASE_NAME="latest-ci-build"
            fi
            echo "##vso[task.setvariable variable=releaseName;]$RELEASE_NAME"
          displayName: Set Release Name
        
        - task: GitHubRelease@1
          continueOnError: true
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'delete'
            tagSource: userSpecifiedTag
            tag: '$(releaseName)'

        - task: GitHubRelease@1
          inputs:
            gitHubConnection: github.com_jcelerier
            repositoryName: ossia/libossia
            action: 'create'
            target: '$(Build.SourceVersion)'
            tagSource: userSpecifiedTag
            tag: '$(releaseName)'
            assetUploadMode: 'replace'
            assets: 'Assets/*'
            isPreRelease: true

        - bash: |
            git checkout origin '$(Build.SourceBranchName)'
            git push --follow-tags --force
          displayName: Push Tag

      - job: NpmRelease
        pool:
          vmImage: 'ubuntu-20.04'

        # condition: startsWith(variables['build.sourceBranch'], 'refs/tags/')  
        
        steps:
        - checkout: self
          submodules: false
          fetchDepth: 1
        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: ossia-unity3d
            path: Assets

        - task: DownloadSecureFile@1
          name: user_npmrc
          displayName: 'Download CA certificate'
          inputs:
            secureFile: 'unity3d-user-npmrc'

        - bash:
            cp '$(user_npmrc.secureFilePath)' ~/.npmrc
            cd Assets
            unzip ossia-unity3d.zip
            cd ossia
            npm install
            npm publish